/*
 * -----------------------------------
 *  TRACEx-TYPEx configuration
 * -----------------------------------
*/

manifest {
	name = 'TYPEx'
	author = 'Mihaela Angelova'
	description = 'Deep cell phenoTYPe characterisation with multiplEX imaging'
	mainScript = 'main.nf'
}

params {

	executor = "slurm"
	publish_dir_mode = 'move'
	max_cpus = 4
	max_memory = 16
	// max_cpus = 32
	// max_memory = 256

	// WORKFLOW
	help = false
	tiered = true
	stratify_by_confidence = true
	sampled = false
	clustered = false
	imcyto = false
	mccs = false
	
	// USER-PROVIDED Study IDs
	study = 'tracerx' // indicate why needed and where used
	release = 'PHLEX_test' // the name of the deep-imcyto run
	panel = 'p1' // unique identifier for the panel

	// IO SETTINGS
	sampleFile = "${baseDir}/data/metadata.tracerx.txt" // Metadata
	inDir = "${baseDir}"
	inputTable = '${baseDir}/data/cell_objects.tracerx.txt' // input when deep-imcyto has not been used
	outDir = "$baseDir/results/TYPEx/${params.release}/"
	paramsConfig = "${baseDir}/conf/typing_params.json"
	annotationConfig = "${baseDir}/conf/cell_type_annotation.p1.json"
	colorConfig = "${baseDir}/conf/celltype_colors.json"
	
	// TISSUE SEGMENTATION
	overlayConfigFile = "${baseDir}/conf/tissue_segmentation.json"
	tissue_seg_model = "${baseDir}/models/tissue_classifier.ilp" // A user-provided classifier can be used for segmentation
	imageDir = "${params.inDir}/results/deep-imcyto/${params.release}/imctools/"
	
	// TYPING METHODS	
	major_method = 'cellassign'
	subtype_method = 'FastPG'
	dimred_method = 'umap'
	
	// MARKERS
	major_markers = 'major_markers'
	subtype_markers = 'subtype_markers'
	annotate_markers = 'major_markers' // used to annotate the cell types, e.g. for clustering
	subsample_markers = params.major_markers
	mostFreqCellType = 'None'
}


includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/modules.config"

profiles {

  debug { process.beforeScript = 'echo $HOSTNAME' }

  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
 }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.cacheDir = '.cache'
  }
  
}

