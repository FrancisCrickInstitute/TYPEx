/*
 * -----------------------------------
 *  TRACEx-TYPEx configuration
 * -----------------------------------
*/

manifest {
	name = 'TYPEx'
	author = 'Mihaela Angelova'
	description = 'Deep cell phenoTYPing with multiplEX imaging'
	mainScript = 'main.nf'
}

params {

	executor = "slurm"
	publish_dir_mode = 'copy'
	max_cpus = 32
	max_memory = 250

	// WORKFLOW
	help = false
	tiered = true
	stratify_by_confidence = true
	sampled = false
	clustered = false
	deep_imcyto = false
    cellprofiler = false
	mccs = params.cellprofiler
	
	// USER-PROVIDED Study IDs
	study = 'tracerx' // indicate why needed and where used
	release = 'PHLEX_test' // the name of the deep-imcyto run
	panel = 'p1' // unique identifier for the panel

	// IO SETTINGS
	sample_file = "${baseDir}/data/metadata.tracerx.txt" // Metadata
	input_dir = "${baseDir}"
	input_table = '${baseDir}/data/cell_objects.tracerx.txt' // input when deep-imcyto has not been used
	output_dir = "$baseDir/results/TYPEx/${params.release}/"
	params_config = "${baseDir}/conf/typing_params.json"
<<<<<<< HEAD
	annotation_config = "${baseDir}/data/cell_type_annotation.testdata.json"
=======
	annotation_config = "${baseDir}/conf/cell_type_annotation.testdata.json"
>>>>>>> 6d74860a3fe45a478d79e4fe9358b4aa47e89f89
	color_config = "${baseDir}/conf/celltype_colors.json"
	
	// TISSUE SEGMENTATION
	overlay_config_file = "${baseDir}/conf/tissue_segmentation.json"
	tissue_seg_model = "${baseDir}/models/tissue_classifier.ilp" // A user-provided classifier can be used for segmentation
	image_dir = "${params.input_dir}/imctools/"
	
	// TYPING METHODS	
	major_method = 'cellassign'
	subtype_method = 'FastPG'
	dimred_method = 'umap'
	
	// MARKERS
	major_markers = 'major_markers'
	subtype_markers = 'subtype_markers'
	annotate_markers = 'major_markers' // used to annotate the cell types, e.g. for clustering
	subsample_markers = params.major_markers
	exclude_cell_lineage = 'None'
	
	// NF settings
	tracedir='trace'
}


includeConfig "${baseDir}/conf/base.config"
includeConfig "${baseDir}/conf/modules.config"

profiles {

  debug { process.beforeScript = 'echo $HOSTNAME' }

  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)'
 }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.cacheDir = '.cache'
  }
 
}

timeline {
  enabled = true
  file = "${params.tracedir}/typex_execution_timeline.html"
}

report {
  enabled = true
  file = "${params.tracedir}/typex_execution_report.html"
}

trace {
  enabled = true
  file = "${params.tracedir}/typex_execution_trace.txt"
}

dag {
  enabled = true
  file = "${params.tracedir}/typex_pipeline_dag.svg"
}


